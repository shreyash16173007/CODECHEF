#include <iostream>
#include <bits/stdc++.h>
using namespace std;
int indicator = 1;
void DFS(vector<pair <int,int>> graphedge[], int weight[], int completed[], int source) 
{ 
    completed[source] = 1;
    if(indicator == 0){
        return;
    }
    vector < pair <int, int> >::iterator itr;
    for(itr = graphedge[source].begin(); itr != graphedge[source].end(); itr++){
		if(completed[itr->first]==0){
            weight[itr->first] = itr->second + weight[source];
            DFS(graphedge,weight,completed,itr->first);
        }
        else{
            if(weight[source]+itr->second != weight[itr->first]){
                indicator = 0;
                return;
            }
        }   
    }
}
int main() {
    int t;
    cin >> t;
    for(int i=0;i<t;i++){        
        int n,m;
        cin >>n>>m;    
        indicator=1;        
        int weight[n+1];
        int completed[n+1];
        vector<pair <int,int>> graphedge[n+1];        
        for(int j=0;j<n+1;j++){
            weight[j]=-1;
            completed[j]=0;
        }        
        for(int j=0;j<m;j++){
            int u,v,w;
            cin >>u>>v>>w;            
            graphedge[u].push_back(make_pair(v,w));
            graphedge[v].push_back(make_pair(u,-1*w));            
        }        
        for(int j=1;j<n+1;j++){
            if(completed[j] == 0){
                DFS(graphedge,weight,completed,j);
            }            
        }        
        if(indicator == 1){
            cout <<"YES\n";
        }
        else{
            cout <<"NO\n";
        }        
    }    
    return 0;
}
